/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    
    public ListNode getRoot(ListNode head){
        ListNode fast, slow, prev;
        fast = slow = head;
        prev = null;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            prev = slow;
            slow = slow.next;
        }
        if(prev != null)
            prev.next = null;
        
        return slow;
    }
    
    
    
    public TreeNode sortedListToBST(ListNode head) {
        
        if(head == null) return null;
        
        ListNode mid = this.getRoot(head);//here head--->prev and prev--->end is defined.
        TreeNode node = new TreeNode(mid.val);
        
        if(head == mid) return node;//Base Condition
        
        node.left = this.sortedListToBST(head);// head-->prev
        node.right = this.sortedListToBST(mid.next);// prev-->end
        return node;
        
    }
}
