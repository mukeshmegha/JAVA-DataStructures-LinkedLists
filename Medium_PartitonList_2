Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
Example 1:

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode before = new ListNode(0);
        ListNode after = new ListNode(0);
        
        ListNode btemp = before;
        ListNode atemp = after;
        
        while(head != null){
            if(head.val < x){
                before.next = new ListNode(head.val);
                before = before.next;
            }
            else{
                after.next = new ListNode(head.val);
                after = after.next;
            }
            head = head.next;
        }
        after.next = null;
        before.next = atemp.next;
        
        return btemp.next;
    }
}
