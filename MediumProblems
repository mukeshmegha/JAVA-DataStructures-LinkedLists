/**
 Given a linked list, swap every two adjacent nodes and return its head.
Example 1:

Input: head = [1,2,3,4]
Output: [2,1,4,3]
 
 
 
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null) return null;
        if(head.next == null) return head;
        ListNode first = head;
        int data = 0;
        
        while(first.next != null || first.next.next != null){
            data = first.val;
            first.val = first.next.val;
            first.next.val = data;
        
            if(first.next.next != null){
                first = first.next.next;
                if(first.next == null) break;
            }
            else{       
                first = first.next;
                break;
            }

        }
        
        return head;
    }
}
