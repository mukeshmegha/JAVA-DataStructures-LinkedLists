160. Intersection of Two Linked Lists

Write a program to find the node at which the intersection of two singly linked lists begins.
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A;
There are 3 nodes before the intersected node in B.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public int getLength(ListNode head){
        int count = 0;
        while(head != null){
            ++count;
            head = head.next;
        }
        return count;
    }
    
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode pa = headA;
        ListNode pb = headB;
        
        int lenA = getLength(headA);
        int lenB = getLength(headB);
        int shift = lenA - lenB;
        int counter = Math.abs(shift);
        
        if(shift > 0){
            while(counter > 0){
                pa = pa.next;
                --counter;
            }
        }
        else{
            while(counter > 0){
                pb = pb.next;
                --counter;
            }
        }
        
        while(pa != null || pb != null){
            if(pa == pb) return pa;
            pa = pa.next;
            pb = pb.next;
        }
        return null;
        
    }
}
